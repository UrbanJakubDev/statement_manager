import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import axios from 'axios'
import { useState, useEffect, ChangeEvent } from 'react'

const Home: NextPage = () => {
    // File state
    const [data, setData] = useState<Object>()
    const [file, setFile] = useState<File | null>(null)
    const [uploadResponse, setUploadResponse] = useState({
        message: 'No file uploaded',
        filename: '',
    })
    const [downloadFileResponse, setDownloadFileResponse] =
        useState<Object | null>()

    // On file select (from the pop up) set the file state
    const onFileChange = (event: ChangeEvent<HTMLInputElement>) => {
        if (event.target.files) {
            let file = event.target.files[0]

            // Check if the file is an csv
            if (file.type !== 'text/csv') {
                alert('Please upload a csv file.')
                event.target.value = ''
                return
            }

            setFile(file)
        }
    }

    // Function to clear the input file after successful upload
    const clearInput = () => {
        const input = document.getElementById('uploadFile')
        if (input) {
            input.value = ''
        }
    }

    // On file upload (click the upload button) not reload the page and send the file
    const onFileUpload = (event: { preventDefault: () => void }) => {
        event.preventDefault()
        if (file) {
            const formData = new FormData()
            formData.append('file', file)
            axios
                .post('http://localhost:4200/example/upload/', formData)
                .then((res) => {
                    setUploadResponse(res.data)
                })
                .catch((err) => {
                    console.log(err)
                })
        }

        // Clear the input
        clearInput()
    }

    // Get file on page load
    const getFile = async () => {
        const res = await axios({
            url: 'http://localhost:4200/ote/make_xml_message/', //your url
            method: 'GET',
            responseType: 'blob', // important
        }).then((res) => {
            const url = window.URL.createObjectURL(new Blob([res.data]))
            const link = document.createElement('a')
            link.href = url
            link.setAttribute('download', uploadResponse?.filename) //or any other extension
            document.body.appendChild(link)
            link.click()
        })
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1>File uploader</h1>
                <p>
                    Lorem ipsum dolor sit, amet consectetur adipisicing elit.
                    Ex, assumenda quae. In enim praesentium rem temporibus
                    maxime saepe illo, modi nisi laudantium eaque cupiditate
                    quae cumque officia dolorum culpa recusandae!
                </p>
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <Image
                            src="/vercel.svg"
                            alt="Vercel Logo"
                            width={72}
                            height={16}
                        />
                    </span>
                </a>
            </footer>
        </div>
    )
}

export default Home
